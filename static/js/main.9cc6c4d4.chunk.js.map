{"version":3,"sources":["GameLogic/Classes/Scene.js","GameLogic/Impl/Scenes/victory_scene.js","GameLogic/Classes/Utils.js","GameLogic/Classes/Item.js","GameLogic/Impl/Items/fur.js","GameLogic/Impl/Items/potion.js","GameLogic/Constants/DROP_TABLE.js","GameLogic/Constants/DAMAGE_TYPE.js","GameLogic/Classes/ActorBase.js","GameLogic/Constants/TARGET_TYPE.js","GameLogic/Impl/Skills.js","GameLogic/Impl/Enemies/bat.js","GameLogic/Impl/Enemies/dog.js","GameLogic/Impl/Enemies/racoon.js","GameLogic/Constants/MOB_TABLE.js","assets/Scenes/mountains.jpg","GameLogic/Impl/Scenes/defeat_scene.js","GameLogic/Impl/Scenes/battle_scene1a.js","GameLogic/Classes/BattleScene.js","GameLogic/Classes/BattleGenerator.js","GameLogic/Controllers/SceneManager.js","GameLogic/Classes/Hero.js","GameLogic/Impl/Heroes/Felen.js","GameLogic/Impl/Heroes/Elumbar.js","GameLogic/Impl/Heroes/Ingos.js","GameLogic/Impl/Heroes/Varne.js","GameStore.js","GameContext.js","Components/TurnOrder/TurnOrder.js","Components/CombatLog/CombatLog.js","Components/HeroSheet/HeroSheet.js","Components/Scenes/BattleScene.js","Components/Scenes/GameOverScreen.js","Components/Scenes/VictoryScene.js","Components/SceneArea/SceneArea.js","App.js","reportWebVitals.js","index.js"],"names":["Scene","name","enemies","heroes","objects","isBattleScene","isDefeatScene","isVictoryScene","victory","droppedItems","makeObservable","this","observable","victory_scene","Utils","add_delay","sides","Math","floor","random","rollString","totalDamage","numDice","split","i","Roll","message","console","log","instance","combat_log","push","Item","description","onUse","user","target","value","id","nanoid","Fur","Potion","DROP_TABLE","NONE","SMALL_CREATURE","DAMAGE_TYPE","SLASHING_DAMAGE","PIERCING_DAMAGE","FIRE_DAMAGE","FROST_DAMAGE","EARTH_DAMAGE","LIGHTNING_DAMAGE","FORCE_DAMAGE","HEALING","NATURE_DAMAGE","ActorBase","image","isDead","isHero","isTurnActive","strength","dexterity","constitution","intelligence","charisma","experience","health","armor_class","items","max_ap","current_ap","actions","onExecute","attackRoll","damageRoll","onSkillUsedOn","skill","apCost","skillName","damage","RollFromString","damageType","TARGET_TYPE","SINGLE_TARGET","MULTI_TARGET","Sparks","targetType","Fireball","Cure","Bite","Scratch","bat","skills","dog","racoon","MOB_TABLE","defeat_scene","battle_scene1a","background_image","mountains","concat","sort","a","b","filter","e","getActorsByInitiative","find","activeHeros","hero","length","allDead","forEach","getAllActorsByInitiative","active_index","actor","setDeathStatus","enemiesDead","generateLootDrops","setActiveTurn","getActiveActor","setTimeout","startEnemyTurn","clearTurnState","resetPartyAP","startHeroTurn","enemy","targetIndex","h","targetHero","nextTurn","sceneManager","changeScene","someEnemy","item","existing","gold_reward","BattleGenerator","zone","mobSet","ranInt","scene","numBattles","scenes","GenerateBattle","SceneManager","GenerateBattles","current_scene","indexOf","curIndex","getCurrentIndex","startCombat","current_heroes","Hero","Felen","Elumbar","Ingos","Varne","names","partyGold","randIndex","splice","GameContext","React","createContext","window","GameProvider","children","gameStore","useLocalObservable","Provider","useGameStore","useContext","TurnOrder","getComputedClassName","className","map","CombatLog","props","updateScrollPosition","logRef","current","childNodes","lastMessage","Array","from","scrollIntoView","behavior","createRef","ref","class","m","Component","HeroSheet","useState","targetAction","setTargetAction","targetSkill","setTargetSkill","action","setAction","setState","endTurn","disabled","style","display","onClick","handleAction","data-descr","BattleScene","computeBackgroundStyle","backgroundImage","nextScene","loadNextScene","src","generateGoldReward","transferItem","GameOverScreen","VictoryScene","alt","SceneArea","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cc6c4d4.chunk.js","sourcesContent":["import { makeObservable, observable } from \"mobx\";\n\nexport default class Scene {\n    name = \"\";\n    enemies = []\n    heroes = []\n    objects = []\n    background_image;\n    sceneManager;\n    isBattleScene = false\n    isDefeatScene = false\n    isVictoryScene = false\n    victory = false\n    droppedItems = []\n    constructor() {\n        makeObservable(this, {\n            name: observable,\n            enemies: observable,\n            heroes: observable,\n            objects: observable,\n            droppedItems: observable\n        })\n    }\n}","import Scene from \"../../Classes/Scene\";\n\nexport default class victory_scene extends Scene {\n    name = \"victory_scene\"\n    isVictoryScene = true\n}","import { instance } from \"../../GameStore\";\n\nexport default class Utils {\n    \n\n    add_delay = 500\n\n    static Roll(sides) {\n        return Math.floor((Math.random() * sides) + 1)\n    }\n\n    static RollFromString(rollString) {\n        let totalDamage = 0\n        let numDice = rollString.split('d')[0]\n        let sides = rollString.split('d')[1]\n        for(let i = 0;i<numDice;i++) {\n            totalDamage+=this.Roll(sides)\n        }\n        return totalDamage\n    }\n\n    static log(message) {\n        console.log(message)\n        instance.combat_log.push(message)\n    }\n}","import { nanoid } from \"nanoid\"\n\n// items are objects that can be used in battle\nexport default class Item {\n    constructor() {\n        this.name = \"\"\n        this.description = \"\"\n        this.onUse = (user, target) => {\n            console.log(this.user, 'used', this.name, 'on', this.target)\n        }\n        this.value = 0\n        this.id = nanoid()\n    }\n}","import Item from '../../Classes/Item'\n\nexport default class Fur extends Item {\n\n    name = \"Fur\"\n    description = \"A potion of some kind\"\n\n}\n","import Item from '../../Classes/Item'\n\nexport default class Potion extends Item {\n\n    name = \"Potion\"\n    description = \"A potion of some kind\"\n\n}\n","import Fur from \"../Impl/Items/fur\"\nimport Potion from \"../Impl/Items/potion\"\n\nconst DROP_TABLE = {\n    NONE: [],\n    SMALL_CREATURE: [\n        new Potion(),\n        new Fur()\n    ],\n\n}\n\n\nexport default DROP_TABLE","const DAMAGE_TYPE = {\n    SLASHING_DAMAGE: 'SLASHING_DAMAGE',\n    PIERCING_DAMAGE: 'PIERCING_DAMAGE',\n    FIRE_DAMAGE: 'FIRE_DAMAGE',\n    FROST_DAMAGE: 'FROST_DAMAGE',\n    EARTH_DAMAGE: 'EARTH_DAMAGE',\n    LIGHTNING_DAMAGE: 'LIGHTNING_DAMAGE',\n    FORCE_DAMAGE: 'FORCE_DAMAGE',\n    HEALING: 'HEALING',\n    NATURE_DAMAGE: 'NATURE_DAMAGE',\n}\n\nexport default DAMAGE_TYPE","import Utils from './Utils'\nimport { nanoid } from 'nanoid'\nimport { makeObservable, observable } from 'mobx';\nimport DROP_TABLE from '../Constants/DROP_TABLE';\nimport DAMAGE_TYPE from '../Constants/DAMAGE_TYPE';\n\nexport default class ActorBase {\n    name = \"\";\n    image = null\n    id = nanoid()\n    description = \"\"\n    isDead = false\n    isHero = false\n    isTurnActive = false\n    strength = 10\n    dexterity = 10\n    constitution = 10\n    intelligence = 10\n    charisma = 10\n    experience = 0\n    health = 1\n    armor_class = 10\n    items = []\n    max_ap = 10\n    current_ap = 10\n    DROP_TABLE = DROP_TABLE.NONE\n    actions = [\n        {\n            name: \"attack\",\n            onExecute: (target) => {\n                if (this.current_ap >= 2) {\n                    this.current_ap = this.current_ap - 2\n                    Utils.log(`${this.name} attacked! ${target.name}`)\n                    let attackRoll = Utils.Roll(20)\n                    let damageRoll = Utils.Roll(this.strength)\n                    if (attackRoll >= target.armor_class) {\n                        Utils.log(`${this.name} hits! with a damage of ${damageRoll}`)\n                        target.health = target.health - damageRoll\n                    } else {\n                        Utils.log(this.name + ' missed! their target ' + target.name + ' with a roll of ' + attackRoll)\n                    }\n                } else { Utils.log(this.name + ' Not enough AP!') }\n            }\n        },\n        {\n            name: \"examine\",\n            onExecute: (target) => {\n                if (this.current_ap >= 1) {\n                    this.current_ap--\n                    Utils.log(`${target.description}`)\n                } else { Utils.log(`${this.name} Not enough AP!`) }\n            }\n        },\n        {\n            name: \"Items\",\n            onExecute: (target) => {\n                if (this.current_ap >= 1) {\n                    this.current_ap--\n                    Utils.log(`${this.name} used an item action on ${target.name}`)\n                } else { Utils.log(this.name +  ' Not enough AP!') }\n            }\n        }\n    ]\n    onSkillUsedOn = (skill, user) => {\n        // this is called when a skill is used on a target\n        // the follwing runs from the context of the actor being targeted\n        if(user.current_ap >= skill.apCost) {\n            Utils.log(`${user.name} used ${skill.skillName} on ${this.name}`)\n            user.current_ap-=skill.apCost\n            let damage = Utils.RollFromString(skill.damageRoll)\n            if(skill.damageType === DAMAGE_TYPE.HEALING) {\n                damage=-damage\n            }\n            Utils.log(`${user.name} Rolled for (${skill.damageRoll})  [${damage} ${skill.damageType}]`)\n            this.health-=damage\n        }\n    }\n    constructor(name) {\n        this.name = name\n        makeObservable(this, {\n            isDead: observable,\n            isHero: observable,\n            isTurnActive: observable,\n            strength: observable,\n            dexterity: observable,\n            constitution: observable,\n            intelligence: observable,\n            charisma: observable,\n            experience: observable,\n            health: observable,\n            armor_class: observable,\n            items: observable,\n            max_ap: observable,\n            current_ap: observable\n        })\n    }\n}","const TARGET_TYPE  = {\n    SINGLE_TARGET: 'SINGLE_TARGET',\n    MULTI_TARGET: 'MULTI_TARGET'\n}\n\nexport default TARGET_TYPE","import DAMAGE_TYPE from \"../Constants/DAMAGE_TYPE\";\nimport TARGET_TYPE from \"../Constants/TARGET_TYPE\";\n\nconst Sparks = {\n    skillName: 'Sparks',\n    damageRoll: '4d3',\n    damageType: DAMAGE_TYPE.LIGHTNING_DAMAGE,\n    apCost: 2,\n    description: 'Sparks and more sparks, a common skills used my mages around the new year..',\n    targetType: TARGET_TYPE.SINGLE_TARGET,\n}\n\nconst Fireball = {\n    skillName: 'Fireball',\n    damageRoll: '1d12',\n    damageType: DAMAGE_TYPE.FIRE_DAMAGE,\n    apCost: 2,\n    description: 'Summons a burning ball of fire',\n    targetType: TARGET_TYPE.SINGLE_TARGET,\n}\n\nconst Cure  = {\n    skillName: 'Cure',\n    damageRoll: '1d12',\n    damageType: DAMAGE_TYPE.HEALING,\n    apCost: 2,\n    description: 'Use the restorative forces of the aether to heal an ally',\n    targetType: TARGET_TYPE.SINGLE_TARGET,\n}\n\n// ENEMIES\n\nconst Bite = {\n    skillName: 'Bite',\n    damageRoll: '1d6',\n    damageType: DAMAGE_TYPE.PIERCING_DAMAGE,\n    apCost: 2,\n    description: 'ima bite ya',\n    targetType: TARGET_TYPE.SINGLE_TARGET\n}\n\nconst Scratch = {\n    skillName: 'Scratch',\n    damageRoll: '1d4',\n    damageType: DAMAGE_TYPE.PIERCING_DAMAGE,\n    apCost: 2,\n    description: 'ima scratch ya',\n    targetType: TARGET_TYPE.SINGLE_TARGET\n}\n\nexport { Sparks, Fireball, Cure, Bite, Scratch }","import ActorBase from \"../../Classes/ActorBase\";\nimport DROP_TABLE from \"../../Constants/DROP_TABLE\";\nimport { Bite } from \"../Skills\";\n\nexport class bat extends ActorBase {\n    name = 'bat'\n    description = \"A furry bat\"\n    health = 5\n    dexterity = 10\n    strength = 5\n    armor_class = 1\n    DROP_TABLE = DROP_TABLE.SMALL_CREATURE\n    image = \"https://cdn.pixabay.com/photo/2013/07/12/13/26/bat-147038_1280.png\"\n    skills = [\n        Bite\n    ]\n}","import ActorBase from \"../../Classes/ActorBase\";\nimport DROP_TABLE from \"../../Constants/DROP_TABLE\";\nimport { Bite } from \"../Skills\";\n\nexport class dog extends ActorBase {\n    name = 'dog'\n    description = \"A furry dog\"\n    health = 10\n    dexterity = 10\n    strength = 5\n    armor_class = 4\n    DROP_TABLE = DROP_TABLE.SMALL_CREATURE\n    image = \"https://cdn.pixabay.com/photo/2013/07/12/15/02/dog-149300_1280.png\"\n    skills = [\n        Bite\n    ]\n}","import ActorBase from \"../../Classes/ActorBase\";\nimport DROP_TABLE from \"../../Constants/DROP_TABLE\";\nimport { Scratch } from \"../Skills\";\n\nexport class racoon extends ActorBase {\n    name = 'racoon'\n    description = \"A furry racoon\"\n    health = 5\n    dexterity = 10\n    strength = 5\n    armor_class = 1\n    DROP_TABLE = DROP_TABLE.SMALL_CREATURE\n    skills = [\n        Scratch\n    ]\n}","import { bat } from \"../Impl/Enemies/bat\";\nimport { dog } from \"../Impl/Enemies/dog\";\nimport { racoon } from \"../Impl/Enemies/racoon\";\n\nconst MOB_TABLE = {\n    'ZONE_1': [\n        [  bat,   bat,   bat,   bat],\n        [  dog,   bat,   bat],\n        [  racoon,   bat,   dog],\n        [  racoon],\n        [  dog,   dog],\n    ]\n}\n\n\nexport default MOB_TABLE","export default __webpack_public_path__ + \"static/media/mountains.fa9d67f4.jpg\";","import Scene from \"../../Classes/Scene\";\n\nexport default class defeat_scene extends Scene {\n        name = \"defeat_scene\"\n        isDefeatScene = true\n}","import mountains from '../../../assets/Scenes/mountains.jpg'\nimport BattleScene from \"../../Classes/BattleScene\";\n\nexport default class battle_scene1a extends BattleScene {\n    name = \"battle_scene1a\"\n    isBattleScene = true\n    background_image = mountains\n}","import { instance } from \"../../GameStore\";\nimport defeat_scene from \"../Impl/Scenes/defeat_scene\";\nimport Scene from \"./Scene\";\nimport Utils from './Utils'\n\n\nexport default class BattleScene extends Scene {\n\n    gold_reward;\n    // Only returns alive heroes\n    getActorsByInitiative() {\n        return this.heroes.concat(this.enemies)\n                            .sort(function(a,b) { return a.dexterity < b.dexterity })\n                            .filter(e => !e.isDead)\n    }\n\n    getAllActorsByInitiative() {\n        return this.heroes.concat(this.enemies)\n                            .sort(function(a,b) { return a.dexterity < b.dexterity })\n    }\n\n    getActiveActor() {\n        const actors = this.getActorsByInitiative()\n        let actor =  actors.find(a => a.isTurnActive === true)\n        return actor\n    }\n\n    getActiveHero() {\n        let activeHeros = this.heroes.filter(hero => hero.isTurnActive === true)\n        if (activeHeros.length == 0) {\n            return []\n        }\n        return activeHeros\n    }\n\n    getInactiveHeroes() {\n        let activeHeros = this.heroes.filter(hero => hero.isTurnActive === false)\n        return activeHeros\n    }\n\n\n    enemiesDead() {\n        let allDead = true\n        this.enemies.forEach((e) => {\n            if(e.isDead === false) {\n                allDead = false\n            }\n        })\n        return allDead\n    }\n\n    heroesDead() {\n        let allDead = true\n        this.enemies.forEach((e) => {\n            if(e.isDead === false) {\n                allDead = false\n            }\n        })\n        return allDead\n    }\n\n    setDeathStatus() {\n        this.getActorsByInitiative().forEach(a => {\n            if(a.health <= 0) {\n                a.isDead = true\n            }\n        })\n    }\n\n    clearTurnState() {\n        this.getAllActorsByInitiative().forEach(a => {\n            a.isTurnActive = false\n        })\n    }\n\n    resetPartyAP() {\n        this.heroes.forEach(hero => {\n            hero.current_ap = hero.max_ap\n        })\n    }\n\n    setActiveTurn() {\n        let active_index = 0\n        // get current index of active actor\n        this.getAllActorsByInitiative().forEach((actor,i) => {\n            if(actor.isTurnActive) {\n                active_index = i\n            }\n        })\n        // set current active actor turn to false\n        this.getAllActorsByInitiative()[active_index].isTurnActive = false\n        // reset index if we are at the end of the array, else move forward by one\n        active_index >= (this.getAllActorsByInitiative().length - 1) ? active_index = 0 : active_index++\n        // keep going until we get an actor that isnt dead\n        while(this.getAllActorsByInitiative()[active_index].isDead === true ) {\n            active_index >= (this.getAllActorsByInitiative().length - 1) ? active_index = 0 : active_index++\n        }\n        this.getAllActorsByInitiative()[active_index].isTurnActive = true\n    }\n\n    nextTurn() {\n        this.setDeathStatus()\n        // Victory check\n        if(this.enemiesDead()) {\n            Utils.log('Victory!')\n            Utils.log('----------------------------------------------------------')\n            this.generateLootDrops()\n            this.victory = true\n        } else {\n            this.setActiveTurn()\n             // reset ap\n             this.getActiveActor().current_ap = this.getActiveActor().max_ap\n             if(!this.getActiveActor().isHero) {\n                 setTimeout(() => this.startEnemyTurn(), 500)\n             } \n        }\n    }\n\n\n    startCombat() {\n        Utils.log(`combat started!`)\n        console.log(this.getActorsByInitiative())\n        this.clearTurnState()\n        this.resetPartyAP()\n        this.getAllActorsByInitiative()[0].isTurnActive = true\n        if(this.getActiveActor().isHero) {\n            this.startHeroTurn()\n        } else {\n            this.startEnemyTurn()\n        }\n    }\n\n    startHeroTurn() {\n        Utils.log('Hero turn started!')\n    }\n\n    startEnemyTurn() {\n        Utils.log('Enemy turn started!')\n        let enemy = this.getActiveActor()\n        // select hero target at random\n        let targetIndex = Utils.Roll(this.heroes.filter(h => !h.isDead).length)\n        targetIndex--\n        let targetHero = this.heroes.filter(h => !h.isDead)[targetIndex]\n        if (targetHero != null) {\n            targetHero.onSkillUsedOn(enemy.skills[0], enemy)\n            // enemy.actions.forEach(action => {\n            //     if(action.name === 'attack') {\n            //         action.onExecute(this.heroes.filter(h => !h.isDead)[targetIndex])\n            //     }\n            // });\n            this.nextTurn()\n        } else { \n            instance.sceneManager.changeScene(new defeat_scene())\n            Utils.log('Your party was defeated..')\n        }\n    }\n\n    generateLootDrops() {\n        let someEnemy = this.getAllActorsByInitiative().filter(actor => actor.isHero === false)[0]\n        this.droppedItems = someEnemy.DROP_TABLE\n    }\n\n    transferItem(item) {\n        // Give the hero the item\n        this.getActiveActor().items.push(item)\n        // Remove the item from the scene's drops\n        this.droppedItems = this.droppedItems.filter(existing => existing.id !== item.id)\n    }\n\n    generateGoldReward() {\n        if(this.gold_reward == null) {\n            this.gold_reward =  this.enemies.length * 100 * (1.0 + (Utils.Roll(50) / 100))\n        }\n        return this.gold_reward\n    }\n}","import Utils from \"./Utils\";\nimport MOB_TABLE from \"../Constants/MOB_TABLE\";\nimport battle_scene1a from \"../Impl/Scenes/battle_scene1a\";\n\nexport default class BattleGenerator {\n\n    static GenerateBattle(zone) {\n        let mobSet =  MOB_TABLE[zone]\n\n        let ranInt = (Utils.Roll(mobSet.length) -1 )\n        let enemies = []\n        mobSet[ranInt].forEach(e => {\n            enemies.push(new e())\n        });\n        let scene = new battle_scene1a(enemies)\n        scene.enemies = enemies\n        return scene\n    }\n\n    static GenerateBattles(zone, numBattles) {\n        let scenes = []\n        for(let i = 0;i < numBattles;i++) {\n            scenes.push(this.GenerateBattle(zone))\n        }\n        return scenes\n    }\n}","import { makeObservable, observable } from 'mobx';\nimport { instance } from '../../GameStore'\nimport victory_scene from '../Impl/Scenes/victory_scene';\nimport BattleGenerator from '../Classes/BattleGenerator';\n\nexport default class SceneManager {\n    scenes = BattleGenerator.GenerateBattles('ZONE_1', 5)\n    current_scene = \"\";\n    getCurrentIndex() {\n        return this.scenes.indexOf(this.current_scene)\n    }\n    constructor(heroes) {\n        makeObservable(this, {\n            current_scene: observable,\n        })\n        this.current_scene = this.scenes[0]\n        this.current_scene.heroes = heroes\n    }\n\n    loadNextScene(){\n        let curIndex = this.getCurrentIndex()\n\n        this.current_scene = null\n        this.current_scene = this.scenes[curIndex + 1]\n        if(this.current_scene == null) {\n            this.current_scene = new victory_scene()\n        } else {\n            this.current_scene.heroes = instance.heroes\n            this.current_scene.startCombat()\n        }\n    }\n\n    changeScene(scene) {\n        let current_heroes = this.current_scene.heroes\n        scene.heroes = current_heroes\n        this.current_scene = scene\n    }\n\n}","import Potion from '../Impl/Items/potion'\nimport ActorBase from './ActorBase'\nimport { Sparks, Fireball, Cure } from '../Impl/Skills'\n\n\nexport default class Hero extends ActorBase {\n    strength = 12\n    dexterity = 12\n    constitution = 12\n    intelligence = 12\n    charisma = 12\n    isHero = true\n    health = 10\n    max_ap = 2\n    current_ap = 2\n    items = [new Potion()]\n    skills = [\n        Sparks,\n        Fireball,\n        Cure\n    ]\n}","import Hero from \"../../Classes/Hero\"\n\nexport class Felen extends Hero {\n    name = \"felen\"\n\n}","import Hero from \"../../Classes/Hero\"\n\nexport class Elumbar extends Hero {\n    name = \"Elumbar\"\n\n}","import Hero from \"../../Classes/Hero\"\n\nexport class Ingos extends Hero {\n    name = \"ingos\"\n\n}","import Hero from \"../../Classes/Hero\"\n\nexport class Varne extends Hero {\n    name = \"varne\"\n\n}","import SceneManager from './GameLogic/Controllers/SceneManager'\nimport { Felen } from './GameLogic/Impl/Heroes/Felen'\nimport { Elumbar } from './GameLogic/Impl/Heroes/Elumbar'\nimport { Ingos } from './GameLogic/Impl/Heroes/Ingos'\nimport { Varne } from './GameLogic/Impl/Heroes/Varne'\nimport { makeObservable, observable } from 'mobx'\n\nexport class GameStore {\n    names = ['varne', 'felen', 'elumbar', 'ingos']\n    combat_log = []\n    heroes = [\n        new Felen(),\n        new Elumbar(),\n        new Ingos(),\n        new Varne()\n    ]\n    sceneManager = new SceneManager(this.heroes)\n    partyGold = 0\n    getRandomName() {\n        let randIndex = Math.floor((Math.random() * this.names.length)) - 1\n        return this.names.splice(randIndex, 1)[0]\n    }\n    getHeroes() {\n        return this.heroes\n    }\n    constructor() {\n        makeObservable(this, {\n            partyGold: observable,\n            combat_log: observable\n        })\n    }\n}\n\nexport const instance = new GameStore()\n","import React from 'react'\nimport { useLocalObservable } from 'mobx-react'\nimport { instance } from './GameStore'\n\nexport const GameContext = React.createContext(\"\")\nwindow.instance = instance\n\nexport const GameProvider = ({ children }) => {\n    const gameStore = useLocalObservable(() => instance)\n    console.log('store from Provider', instance)\n\n    return <GameContext.Provider value={gameStore}>\n        {children}\n    </GameContext.Provider>\n}\n\nexport const useGameStore = () => React.useContext(GameContext)\n","import React from 'react'\nimport { useGameStore } from '../../GameContext'\nimport { Observer } from 'mobx-react-lite'\nimport './TurnOrder.scss'\n\nexport const TurnOrder = () => {\n    const gameStore = useGameStore()\n\n    const getComputedClassName = (actor) => {\n        let className = actor.isHero ? 'hero' : 'enemy'\n        if (actor.isTurnActive) {\n            className += ' selected'\n        }\n        if (actor.isDead) {\n            className += ' dead'\n        }\n        return className\n    }\n    const getActors = () => {\n        // In cases where the scene changes mid-combat, check to make sure we can still call\n        // the function\n        if( gameStore.sceneManager.current_scene.getActorsByInitiative != null) {\n            return gameStore.sceneManager.current_scene.getActorsByInitiative()\n        } else return []\n    }\n\n    return (\n        <Observer>\n            {() =>\n                <div className=\"turn-container\">\n                    {\n                        getActors().map((actor) =>\n                            <div className={'actor ' + getComputedClassName(actor)} key={actor.id + 'turn-order'}> {actor.name}</div>\n                        )\n                    }\n                </div>\n            }\n        </Observer>\n    )\n}","import { Observer } from \"mobx-react-lite\"\nimport { useGameStore } from \"../../GameContext\"\nimport React, { createRef } from 'react'\nimport { instance } from '../../GameStore'\n\nexport class CombatLog extends React.Component {\n    constructor(props) {\n        super(props)\n        this.gameStore = instance\n        this.logRef = createRef(null)\n    }\n\n    updateScrollPosition = (logRef) => {\n        if (logRef.current) {\n            if (logRef.current.childNodes.length !== 0) {\n                let lastMessage = Array.from(logRef.current.childNodes)[logRef.current.childNodes.length - 1]\n                console.log(lastMessage)\n                setTimeout(() => lastMessage.scrollIntoView({ behavior: 'smooth' }), 100)\n            } else {\n                console.log('null case')\n            }\n        }\n    }\n\n\n    render() {\n        return (\n            <Observer>\n                {() =>\n                    <div className=\"panel\">\n                        {this.updateScrollPosition(this.logRef)}\n                        <div ref={this.logRef} class=\"combat-log\">\n                            {this.gameStore.combat_log.map((m) =>\n                                <div className=\"message\">{m}</div>\n                            )}\n                        </div>\n                    </div>\n                }\n            </Observer>\n        )\n    }\n}","import React from 'react'\nimport { useGameStore } from '../../GameContext'\nimport './HeroSheet.scss'\nimport { Observer } from 'mobx-react-lite';\nimport { CombatLog } from '../CombatLog/CombatLog';\n\nexport const HeroSheet = () => {\n    const gameStore = useGameStore()\n    const [targetAction, setTargetAction] = React.useState(\"\")\n    const [targetSkill, setTargetSkill] = React.useState(\"\")\n    const [action, setAction] = React.useState(\"\")\n\n    const handleAction = (target, hero) => {\n        if (targetSkill) {\n            target.onSkillUsedOn(targetSkill, hero)\n        } else {\n            action.onExecute(target)\n        }\n        setTargetAction(false)\n        setTargetSkill(null)\n        if (hero.current_ap === 0) {\n            endTurn()\n        }\n    }\n\n    const setState = (targetAction, action, skill) => {\n        setTargetSkill(skill)\n        setTargetAction(targetAction)\n        setAction(action)\n    }\n\n    const endTurn = () => {\n        console.log('Turn ended')\n        gameStore.sceneManager.current_scene.nextTurn()\n    }\n\n\n    return (\n        <Observer>\n            {() =>\n                <div className=\"hero-sheet-container\">\n                    {gameStore.sceneManager.current_scene.heroes.map((hero) =>\n                        <div className=\"panel text-medium\">\n                        <div className={hero.isDead ? 'character-sheet dead' : 'character-sheet'}>\n                            <div>{hero.name}</div>\n                            {hero.actions.map((action) =>\n                                <button disabled={!hero.isTurnActive} style={{ display: 'block' }} onClick={() => setState(true, action)} key={hero.id}><strong>{action.name}</strong></button>\n                            )}\n                            {hero.skills.map((skill) => \n                                <button disabled={!hero.isTurnActive} onClick={() => setState(true, action, skill)}>{skill.skillName}</button>\n                            )}\n                            {gameStore.sceneManager.current_scene.enemies.map((enemy) =>\n                                targetAction && hero.isTurnActive && !enemy.isDead &&\n                                <button key={enemy.id} onClick={() => handleAction(enemy, hero)}>{enemy.name} | {enemy.health}</button>\n                            )}\n                            \n                            <div>AP: {hero.current_ap} </div>\n                            <div>Health: {hero.health} </div>\n                            <div data-descr={'STR:' + hero.strength + ' DEX:' + hero.dexterity + ' CON:' + hero.constitution + \" INT:\" + hero.intelligence + \" CHAR:\" + hero.charisma}>Stats</div>\n                            <div><strong>Items</strong></div>\n                            { hero.items.map((item) => \n                                <div>{item.name}</div>\n                            )}\n                            <button disabled={!hero.isTurnActive} onClick={() => endTurn()}>end turn</button>\n                        </div>\n                        </div>\n                    )}\n                    <CombatLog/>\n                </div>\n            }\n        </Observer>\n    )\n}","\nimport React from 'react'\nimport { instance } from '../../GameStore'\nimport { Observer } from 'mobx-react-lite';\nimport { TurnOrder } from \"../TurnOrder/TurnOrder\"\nimport { HeroSheet } from '../HeroSheet/HeroSheet'\nimport './BattleScene.scss'\nimport { CombatLog } from '../CombatLog/CombatLog';\n\nexport class BattleScene extends React.Component {\n\n    componentDidMount() {\n        instance.sceneManager.current_scene.startCombat()\n    }\n\n    computeBackgroundStyle = () => {\n        return { backgroundImage: `url(${instance.sceneManager.current_scene.background_image})` }\n    }\n\n    nextScene = () => {\n        instance.partyGold += Math.floor(instance.sceneManager.current_scene.gold_reward)\n        instance.sceneManager.loadNextScene()\n    }\n\n    render() {\n        return (\n            <Observer>\n                {() => <>\n                    <div className=\"panel no-padding\">\n                    <div className=\"scene-area\" style={this.computeBackgroundStyle()}>\n                        <div className=\"monster-area\">\n                            {instance.sceneManager.current_scene.enemies.map((enemy) =>\n                                !enemy.isDead &&\n                                <div className=\"monster\" key={enemy.id + 'monster-area'}>\n                                    <div>{enemy.name} | ac: {enemy.armor_class} | hp: {enemy.health}</div>\n                                    <img src={enemy.image ? enemy.image : \"\"}></img>\n                                </div>\n                            )}\n                            {instance.sceneManager.current_scene.victory &&\n                                <div className=\"reward-container\">\n                                    <div>Victory! rewards:</div>\n                                    <div> Gold: {instance.sceneManager.current_scene.generateGoldReward()}</div>\n                                    <div>Items </div>\n                                    {instance.sceneManager.current_scene.droppedItems.map((item) =>\n                                        <div className=\"item\">\n                                            {item.name}\n                                            <span>\n                                                <button onClick={() => instance.sceneManager.current_scene.transferItem(item)}>Take</button>\n                                            </span>\n                                        </div>\n                                    )}\n                                    <button onClick={() => this.nextScene()}>Next</button>\n                                </div>\n                            }\n                        </div>\n                        <TurnOrder />\n                    </div>\n                    </div>\n                    <HeroSheet />\n                </>\n                }\n            </Observer>\n        )\n    }\n}","export const GameOverScreen = () => {\n    return (\n        <>Game Over</>\n    )\n}","export const VictoryScene = () => {\n    return (\n        <>\n        Victory! You WON!\n        <img alt=\"nope\" src=\"https://www.zeldadungeon.net/wp-content/uploads/2013/12/animation_debut8-article_image.jpg\"/>\n        </>\n    )\n}","import { Observer } from 'mobx-react-lite'\nimport { useGameStore } from '../../GameContext'\nimport { BattleScene } from '../Scenes/BattleScene'\nimport { GameOverScreen } from '../Scenes/GameOverScreen'\nimport { VictoryScene } from '../Scenes/VictoryScene'\nimport './SceneArea.scss'\n\n\nexport const SceneArea = () => {\n    const gameStore = useGameStore()\n\n    return (\n        <Observer>\n            {() =>\n                <>\n                    <div className=\"panel text-medium\">{gameStore.sceneManager.current_scene.name} - Gold:{gameStore.partyGold}</div>\n                    {gameStore.sceneManager.current_scene.isBattleScene &&\n                        <BattleScene />\n                    }\n                    {gameStore.sceneManager.current_scene.isDefeatScene &&\n                        <GameOverScreen />\n                    }\n                    {gameStore.sceneManager.current_scene.isVictoryScene &&\n                        <VictoryScene />\n                    }\n                </>\n            }\n        </Observer>\n    )\n}\n","import React from 'react';\nimport { SceneArea } from './Components/SceneArea/SceneArea';\nimport './App.css'\nimport '../src/Components/fonts/_font.scss'\n\nfunction App() {\n  return (\n    <div className=\"main-content\">\n      <SceneArea/>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { GameProvider } from './GameContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <App />\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}